jenkins:
  controller:
    image: "molgenis/jenkins"
    tag: "1.0.3"
    imagePullPolicy: IfNotPresent
    ingress:
      enabled: true
      hostName: jenkins.dev.molgenis.org
    jenkinsUrlProtocol: "https"
    serviceType: ClusterIP
    installPlugins: []
    resources:
      limits:
        cpu: 500m
        memory: 4096Mi
      requests:
        cpu: 500m
        memory: 2000Mi
    sidecars:
      configAutoReload:
        enabled: true
    healthProbes: true
    probes:
      startupProbe:
        timeoutSeconds: 5
        periodSeconds: 10
        failureThreshold: 45
    JCasC:
      defaultConfig: true
      securityRealm: |-
        oic:
          clientId: "${CLIENT_ID}"
          clientSecret: "${CLIENT_SECRET}"
          automanualconfigure: auto
          wellKnownOpenIDConfigurationUrl: "${OIDC_CONFIG_URL}"
          groupsFieldName: roles
          emailFieldName: email
          fullNameFieldName: name
      authorizationStrategy: |-
        roleBased:
          roles:
            global:
              - name: "admin"
                description: "Jenkins administrators"
                permissions:
                  - "Overall/Administer"
                assignments:
                  - "admin"
              - name: "readonly"
                description: "Read-only users"
                permissions:
                  - "Overall/Read"
                  - "Job/Read"
                assignments:
                  - "reader"
      configScripts:
        pipelinetools: |
          unclassified:
            globalLibraries:
              libraries:
              - defaultVersion: "master"
                implicit: true
                name: "molgenis-jenkins-pipeline"
                retriever:
                  modernSCM:
                    scm:
                      git:
                        credentialsId: "molgenis-jenkins-github-secret"
                        remote: "https://github.com/molgenis/molgenis-jenkins-pipeline.git"
                        traits:
                        - "gitBranchDiscovery"
        slack: |-
          unclassified:
            slackNotifier:
              botUser: false
              room: "#hubot"
              sendAsText: false
              teamDomain: "molgenisdev"
              tokenCredentialId: "molgenis-jenkins-slack-secret"
        jobs: |-
          jobs:
            - script: >
                pipelineJob('test-e2e-commander') {
                  description('The nightly MOLGENIS Commander integration tests')
                  definition {
                    cpsScm {
                      lightweight()
                      scm {
                        github('molgenis/molgenis-ops-helm', 'master')
                        scriptPath('charts/molgenis-jenkins/resources/tests/e2e-commander/Jenkinsfile')
                      }
                    }
                  }
                  triggers {
                    cron('TZ=Europe/Amsterdam\nH H(2-5) * * 1-5')
                  }
                }
            - script: >
                pipelineJob('preview') {
                  description('Preview a molgenis PR')
                  parameters {
                    choiceParam('ACTION', ['install', 'delete', 'list'], 'What action to perform')
                    stringParam('TAG', 'dev', 'The docker tag to deploy')
                  }
                  authenticationToken('${PREVIEW_JOB_AUTH_TOKEN}')
                  definition {
                    cpsScm {
                      lightweight()
                      scm {
                        github('molgenis/molgenis-ops-helm', 'master')
                        scriptPath('charts/molgenis-jenkins/resources/preview/Jenkinsfile')
                      }
                    }
                  }
                }
            - script: >
                organizationFolder('${GITHUB_ORG_NAME}') {
                  description('MOLGENIS projects in the MOLGENIS organization')
                  displayName('${GITHUB_ORG_NAME}')
                  triggers {
                      periodic(86400)
                  }
                  organizations {
                    github {
                      repoOwner('${GITHUB_ORG_NAME}')
                      apiUri("https://api.github.com")
                      credentialsId('molgenis-jenkins-github-secret')
                      scanCredentialsId('molgenis-jenkins-github-secret')
                    }
                  }
                  configure {
                    def traits = it / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                    traits << 'jenkins.scm.impl.trait.RegexSCMSourceFilterTrait' {
                        regex 'molgenis.*'
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                        strategyId 1
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                        strategyId 2
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                        strategyId 2
                        trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'org.jenkinsci.plugins.scm__filter.GitHubCommitSkipTrait' {}
                    traits << 'jenkins.plugins.git.traits.LocalBranchTrait' {
                        extension(class: 'hudson.plugins.git.extensions.impl.LocalBranch') {
                            localBranch '**'
                        }
                    }
                    traits << 'jenkins.plugins.git.traits.UserIdentityTrait' {
                        extension(class: 'hudson.plugins.git.extensions.impl.UserIdentity') {
                            name 'MOLGENIS Jenkins'
                            email 'molgenis+ci@gmail.com'
                        }
                    }
                  }
                }
            - script: >
                organizationFolder('other') {
                  description('Non-MOLGENIS projects in the MOLGENIS organization')
                  displayName('Other')
                  triggers {
                      periodic(86400)
                  }
                  organizations {
                    github {
                      repoOwner('${GITHUB_ORG_NAME}')
                      apiUri("https://api.github.com")
                      credentialsId('molgenis-jenkins-github-secret')
                      scanCredentialsId('molgenis-jenkins-github-secret')
                    }
                  }
                  configure {
                    def traits = it / navigators / 'org.jenkinsci.plugins.github__branch__source.GitHubSCMNavigator' / traits
                    traits << 'jenkins.scm.impl.trait.RegexSCMSourceFilterTrait' {
                        regex '^(?!molgenis)(?!NGS)(?!GAP).*'
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.BranchDiscoveryTrait' {
                        strategyId 1
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait' {
                        strategyId 2
                    }
                    traits << 'org.jenkinsci.plugins.github__branch__source.ForkPullRequestDiscoveryTrait' {
                        strategyId 2
                        trust(class: 'org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission')
                    }
                    traits << 'org.jenkinsci.plugins.scm__filter.GitHubCommitSkipTrait' {}
                    traits << 'jenkins.plugins.git.traits.LocalBranchTrait' {
                        extension(class: 'hudson.plugins.git.extensions.impl.LocalBranch') {
                            localBranch '**'
                        }
                    }
                    traits << 'jenkins.plugins.git.traits.UserIdentityTrait' {
                        extension(class: 'hudson.plugins.git.extensions.impl.UserIdentity') {
                            name 'MOLGENIS Jenkins'
                            email 'molgenis+ci@gmail.com'
                        }
                    }
                  }
                }
        git: |
          unclassified:
            gitSCM:
              globalConfigEmail: "molgenis+ci@gmail.com"
              globalConfigName: "MOLGENIS Jenkins"
            gitHubPluginConfig:
              configs:
                - name: GitHub
                  manageHooks: false
                  credentialsId: "molgenis-jenkins-github-token-secret"
    scriptApproval:
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods replaceAll java.lang.String java.util.regex.Pattern java.lang.String"
    nodeSelector:
      deployPod: "true"
  persistence:
    mounts:
      - name: controller-config
        mountPath: /run/secrets/OIDC_CONFIG_URL
        subPath: OIDC_CONFIG_URL
        readOnly: true
      - name: controller-config
        mountPath: /run/secrets/CLIENT_ID
        subPath: CLIENT_ID
        readOnly: true
      - name: controller-config
        mountPath: /run/secrets/GITHUB_ORG_NAME
        subPath: GITHUB_ORG_NAME
        readOnly: true
      - name: controller-secret
        mountPath: /run/secrets/PREVIEW_JOB_AUTH_TOKEN
        subPath: PREVIEW_JOB_AUTH_TOKEN
        readOnly: true
      - name: controller-secret
        mountPath: /run/secrets/CLIENT_SECRET
        subPath: CLIENT_SECRET
        readOnly: true
    volumes:
      - name: controller-secret
        secret:
          secretName: controller-secret
      - name: controller-config
        configMap:
          name: controller-config
  rbac:
    create: true
    readSecrets: true
  agent:
    maxRequestsPerHostStr: "32"
    podTemplates:
      shared: |
        - name: shared
          label: shared
          containers:
            - name: kaniko
              image: "gcr.io/kaniko-project/executor:debug-v0.7.0"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "250m"
              resourceRequestMemory: "250Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1Gi"
            - name: rancher
              image: "rancher/cli2:v2.4.10"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "100m"
              resourceRequestMemory: "250Mi"
              resourceLimitCpu: "250m"
              resourceLimitMemory: "500Mi"
              envVars:
                - envVar:
                    key: HOME
                    value: /home/jenkins/agent
            - name: vault
              image: "vault:1.3.1"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "100m"
              resourceRequestMemory: "100Mi"
              resourceLimitCpu: "250m"
              resourceLimitMemory: "250Mi"
              envVars:
                - envVar:
                    key: VAULT_SKIP_VERIFY
                    value: 1
                - secretEnvVar:
                    key: VAULT_TOKEN
                    secretName: molgenis-pipeline-vault-secret
                    secretKey: token
                - secretEnvVar:
                    key: VAULT_ADDR
                    secretName: molgenis-pipeline-vault-secret
                    secretKey: addr
            - name: sonar
              image: "molgenis/sonarqube-scanner:1.0.1"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "500Mi"
              resourceLimitCpu: "2"
              resourceLimitMemory: "3Gi"
          envVars:
            - envVar:
                key: "npm_config_registry"
                value: "https://registry.molgenis.org/repository/npm-central/"
            - envVar:
                key: LOCAL_REGISTRY
                value: registry.molgenis.org
            - envVar:
                key: DOCKER_REGISTRY
                value: registry.hub.docker.com
            - envVar:
                key: HELM_REPO
                value: https://registry.molgenis.org/repository/helm/
            - envVar:
                key: HELM_REPOSITORY
                value: https://helm.molgenis.org/
          nodeUsageMode: NORMAL
          volumes:
            - hostPathVolume:
                hostPath: "/var/run/docker.sock"
                mountPath: "/var/run/docker.sock"
      molgenis-jdk8: |
        - name: molgenis-jdk8
          label: molgenis-jdk8
          inheritFrom: shared
          nodeUsageMode: EXCLUSIVE
          containers:
            - name: maven
              image: "molgenis/maven-jdk8:maven-jdk8-release-2019-12-24_12-50-19"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "250m"
              resourceRequestMemory: "1Gi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "3Gi"
              envVars:
                - envVar:
                    key: MAVEN_OPTS
                    value: "-Duser.home=/home/jenkins/agent"
                - envVar:
                    key: MAVEN_CONFIG
                    value: "/home/jenkins/agent/.m2"
                - envVar:
                    key: HOME
                    value: /home/jenkins/agent
      molgenis-jdk11: |
        - name: molgenis-jdk11
          label: molgenis-jdk11
          inheritFrom: shared
          nodeUsageMode: EXCLUSIVE
          containers:
            - name: maven
              image: "molgenis/maven-jdk11:maven-jdk11-release-2019-05-07_09-20-11"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "250m"
              resourceRequestMemory: "1Gi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "3Gi"
              envVars:
                - envVar:
                    key: MAVEN_OPTS
                    value: "-Duser.home=/home/jenkins/agent"
                - envVar:
                    key: MAVEN_CONFIG
                    value: "/home/jenkins/agent/.m2"
                - envVar:
                    key: HOME
                    value: /home/jenkins/agent
      node-erbium: |
        - name: node-erbium
          label: node-erbium
          nodeUsageMode: EXCLUSIVE
          inheritFrom: shared
          containers:
            - name: node
              image: "molgenis/node-erbium:1.1.1"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "250m"
              resourceRequestMemory: "500Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2Gi"
      node-fermium: |
        - name: node-fermium
          label: node-fermium
          nodeUsageMode: EXCLUSIVE
          inheritFrom: shared
          containers:
            - name: node
              image: "molgenis/node-fermium:1.0.1"
              command: cat
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "250m"
              resourceRequestMemory: "500Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2Gi"
      site-gen: |
        - name: site-gen
          label: site-gen
          nodeUsageMode: EXCLUSIVE
          inheritFrom: shared
          containers:
            - name: jekyll
              image: "molgenis/jekyll:jekyll-release-2019-03-06_08-18-10"
              ttyEnabled: true
              command: "cat"
              args: ""
              resourceRequestCpu: "250m"
              resourceRequestMemory: "500Mi"
              resourceLimitCpu: "500m"
              resourceLimitMemory: "1500Mi"
      ansible: |
        - name: ansible
          label: ansible
          inheritFrom: shared
          nodeUsageMode: EXCLUSIVE
          containers:
            - name: toolset
              image: "quay.io/ansible/toolset:3.4.1"
              ttyEnabled: true
              command: "/bin/bash"
              args: ""
            - name: centos-7
              image: "centos:centos7.9.2009"
              ttyEnabled: true
              command: "/bin/bash"
              args: ""
            - name: centos-8
              image: "centos:centos8.3.2011"
              ttyEnabled: true
              command: "/bin/bash"
              args: ""
            - name: ubuntu-20
              image: "ubuntu:focal"
              ttyEnabled: true
              command: "/bin/bash"
              args: ""
            - name: debian-10
              image: "debian:buster"
              ttyEnabled: true
              command: "/bin/bash"
              args: ""
    nodeSelector:
      deployPod: "true"

# secret contains configuration for the kubernetes secrets that jenkins can access
secret:
  githubOrg: molgenis-jenkins
  openID:
    clientID: "xxxx"
    clientSecret: "xxxx"
    configUrl: https://auth.molgenis.org/.well-known/openid-configuration
  previewJob:
    authToken: "ABCDE"
  # Jenkins CI integration on slack, see https://molgenisdev.slack.com/services/B01C7ENKVRQ
  slack: 'xxxx'
  # vault configures the vault secret
  vault:
    token: 'xxxx'
    # local vault: 'https://vault-operator.vault-operator.svc:8200'
    # But for cross-cluster access use the node port:
    addr: 'http://192.168.64.161:30543'
  # githubToken contains access token for jenkins bot account on github.com
  gitHub:
    user: 'molgenis-jenkins'
    token: 'xxxx'
  # registry contains credentials for registry.molgenis.org
  registry:
    user: 'admin'
    password: 'xxxx'
  # dockerHubPassword contains password for hub.docker.com
  dockerHub:
    user: 'molgenisci'
    password: 'xxxx'
