#jupyterhub:
  ingress:
    enabled: true
    hosts:
      - jupyter.koudekoffie.nl
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: letsencrypt
    tls:
      - hosts:
        - jupyter.koudekoffie.nl
        secretName: jupyterhub-secret
      
  hub:
    config:
      JupyterHub:
        admin_access: true
        authenticator_class: generic-oauth
      Authenticator:
        auto_login: false
      GenericOAuthenticator:
        client_id: abaa320f-9e12-487d-b484-ea4c5b71dbef
        client_secret: QfMUyyQl30I-tGQDK6v6gY45JTXUmiQ62r7mL9vZ5nw 
        login_service: MOLGENIS
        authorize_url: https://lifecycle-auth.molgenis.org/oauth2/authorize
        token_url: https://lifecycle-auth.molgenis.org/oauth2/token
        userdata_url: https://lifecycle-auth.molgenis.org/oauth2/userinfo
        userdata_method: GET
        username_key: email
        oauth_callback_url: http://jupyter.koudekoffie.nl/hub/oauth_callback
        scope:
          - openid
          - name
          - profile
          - email
    extraConfig:
      checkRolesConfig: |
        def check_roles(authenticator, handler, authentication):
            if ("roles" in authentication["auth_state"]["oauth_user"]):
                if ("ADMIN" in authentication["auth_state"]["oauth_user"]["roles"]):
                    authentication["admin"] = True
                    return authentication
                elif ("USER" in authentication["auth_state"]["oauth_user"]["roles"]):
                    return authentication
                else:
                    return None
            else:
                return None
        c.Authenticator.post_auth_hook = check_roles
  
        #  scheduling:
        #    userScheduler:
        #      enabled: true
        #    podPriority:
        #      enabled: true
        #    userPlaceholder:
        #      enabled: true
        #      replicas: 3
        #    userPods:
        #      nodeAffinity:
        #        matchNodePurpose: require

  singleuser:
    image:
      name: datashield/rstudio-jupyter
      tag: 1.2.0
    cpu:
      limit: 2
      guarantee: 2
    memory:
      limit: 3G
      guarantee: 1500M
    startTimeout: 800
    profileList: 
        - 
          display_name: "DataSHIELD - dsBaseClient v6.1.0"
          description: "RStudio analysis environment dsBaseClient v6.1.0"
          kubespawner_override: 
            image: "datashield/rstudio-jupyter:1.2.0"
          default: true
  
  proxy:
    secretToken: xxxxxxxxxzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    service:
      type: NodePort
        #https:
        #  enabled: true
        #  hosts: 
        #    - jupyter.koudekoffie.nl
        #  letsencrypt:
        #    contactEmail: f.d.postma@umcg.nl
  prePuller:
    hook:
      podSchedulingWaitDuration: -1
  # https://github.com/jupyterhub/jupyterhub-idle-culler#as-a-standalone-script
  cull:
    enabled: true
    users: false
    removeNamedServers: false
    timeout: 3600
    every: 2400
    concurrency: 10
    maxAge: 0
